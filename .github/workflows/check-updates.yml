name: Check and Publish Updates

on:
  schedule:
    - cron: '0 0 1 1 *'
  workflow_dispatch: 

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4
    
    - name: Check for updates
      id: check
      run: |
        # echo "Skipped now, go to next one"
        python update-check.py > output.txt
        cat output.txt
        
        Extract version info
        if grep -q "New version available!" output.txt; then
          echo "update_available=true" >> $GITHUB_OUTPUT
          NEW_VERSION=$(grep "Latest version:" output.txt | cut -d: -f2 | xargs)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          # Extract just the version number without ubuntu suffix
          PKGVER=$(echo $NEW_VERSION | cut -d- -f1 | cut -d+ -f1)
          echo "pkgver=$PKGVER" >> $GITHUB_OUTPUT
        else
          echo "update_available=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Download and calculate checksum
      if: steps.check.outputs.update_available == 'true'
      id: download
      run: |
        DEB_URL="https://launchpad.net/~libfprint-tod1-group/+archive/ubuntu/ppa/+files/libfprint-2-tod1-goodix-550a_${{ steps.check.outputs.new_version }}_amd64.deb"
        wget -O temp.deb "$DEB_URL"
        CHECKSUM=$(sha256sum temp.deb | cut -d ' ' -f 1)
        echo "sha256sum=$CHECKSUM" >> $GITHUB_OUTPUT
        rm temp.deb
    
    - name: Create PKGBUILD
      if: steps.check.outputs.update_available == 'true'
      run: |
        mkdir -p aur-package
        cat > aur-package/PKGBUILD << 'EOF'
        # Maintainer: MLM-stuff gfxoxinzh@mozmail.com
        
        pkgname=libfprint-2-tod1-goodix-v2
        pkgver=${{ steps.check.outputs.pkgver }}
        _debver="${pkgver}-0ubuntu1"
        pkgrel=1
        pkgdesc="Proprietary driver for Goodix fingerprint readers from Ubuntu launchpad"
        arch=('x86_64')
        url="https://launchpad.net/~libfprint-tod1-group"
        license=('custom')
        depends=('libfprint-tod')
        makedepends=('tar')
        groups=('fprint')
        source=("https://launchpad.net/~libfprint-tod1-group/+archive/ubuntu/ppa/+files/${pkgname}_${_debver}_amd64.deb")
        sha256sums=('${{ steps.download.outputs.sha256sum }}')
        
        prepare() {
            cd "$srcdir"
            # Extract the deb file
            ar x "${pkgname}_${_debver}_amd64.deb"
            # Extract data archive
            tar -xf data.tar.*
        }
        
        package() {
            cd "$srcdir"
            
            # Install library files
            if [ -d "usr/lib/x86_64-linux-gnu/libfprint-2/tod-1" ]; then
                install -dm755 "$pkgdir/usr/lib/libfprint-2/tod-1/"
                install -Dm755 usr/lib/x86_64-linux-gnu/libfprint-2/tod-1/*.so "$pkgdir/usr/lib/libfprint-2/tod-1/"
            fi
            
            # Install udev rules
            if [ -d "lib/udev/rules.d" ]; then
                install -dm755 "$pkgdir/usr/lib/udev/rules.d/"
                install -Dm644 lib/udev/rules.d/*.rules "$pkgdir/usr/lib/udev/rules.d/"
            fi
            
            # Install license if present
            if [ -f "usr/share/doc/${pkgname}/copyright" ]; then
                install -Dm644 "usr/share/doc/${pkgname}/copyright" "$pkgdir/usr/share/licenses/${pkgname}/LICENSE"
            fi
        }
        EOF
    
    - name: Publish to AUR
      if: steps.check.outputs.update_available == 'true'
      uses: KSXGitHub/github-actions-deploy-aur@master
      with:
        pkgname: libfprint-2-tod1-goodix-v2
        pkgbuild: aur-package/PKGBUILD
        commit_username: MLM-stuff
        commit_email: gfxoxinzh@mozmail.com
        ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        commit_message: "Update to version ${{ steps.check.outputs.pkgver }}"
